# all the imports
import os
import sqlite3
import sys
import subprocess
import re
import runpy
from flask import Flask, request, session, g, redirect, url_for, abort, render_template, flash
from socket import gethostname


app = Flask(__name__) # create the application instance :)
app.config.from_object(__name__) # load config from this file , flaskr.py

# Load default config and override config from an environment variable
app.config.update(dict(
    DATABASE=os.path.join(app.root_path, 'flaskr.db'),
    SECRET_KEY='development key',
    USERNAME='admin',
    PASSWORD='default'
))
app.config.from_envvar('FLASKR_SETTINGS', silent=True)

def connect_db():
    """Connects to the specific database."""
    rv = sqlite3.connect(app.config['DATABASE'])
    rv.row_factory = sqlite3.Row
    return rv

def get_db():
    """Opens a new database connection if there is none yet for the
    current application context.
    """
    if not hasattr(g, 'sqlite_db'):
        g.sqlite_db = connect_db()
    return g.sqlite_db

@app.teardown_appcontext
def close_db(error):
    """Closes the database again at the end of the request."""
    if hasattr(g, 'sqlite_db'):
        g.sqlite_db.close()

def init_db():
    db = get_db()
    with app.open_resource('schema.sql', mode='r') as f:
        db.cursor().executescript(f.read())
    db.commit()

@app.cli.command('initdb')
def initdb_command():
    """Initializes the database."""
    init_db()
    print('Initialized the database.')

#@app.route('/')
#def show_entries():
#    db = get_db()
#    cur = db.execute('select title, text from entries order by id desc')
#    entries = cur.fetchall()
#    return render_template('show_entries.html', entries=entries)

@app.route('/vvv/tester')
def tester():
    patientAttribute = request.args.get('patientAttribute', None)
    attrValue        = request.args.get('attrValue', None)
    print (patientAttribute)
    print (attrValue)
    return ("badness.")

@app.route('/v1/cohortQuery')
def cohortQuery():
    requestQueryString = request.query_string.decode('UTF-8')
    print(requestQueryString)
    svcsURL = '"http://dsai-de-svcs.edc.renci.org:5000/v1/cohortQuery?'+requestQueryString +'&relay=1"'
    elkURL  = '"http://dsai-de-elk.edc.renci.org:5000/v1/cohortQuery?'+requestQueryString +'&relay=1"'
    amqpURL = '"http://dsai-de-amqp.edc.renci.org:5000/v1/cohortQuery?'+requestQueryString +'&relay=1"'
    svcsCmd = 'curl ' + svcsURL + '2>&1 > /dev/null &'
    elkCmd  = 'curl ' + elkURL  + '2>&1 > /dev/null &'
    amqpCmd = 'curl ' + amqpURL + '2>&1 > /dev/null &'

    print("commands:")
    print (svcsCmd)
    print(elkCmd)
    print(amqpCmd)

    patientAttribute = request.args.get('patientAttribute', 'bogusColumn')
    attrValue        = request.args.get('attrValue', '0')
    relay            = request.args.get('relay',0)

    if relay==0:
        print("in relay code")
        hostName = gethostname()
        if hostName != 'dsai-de-svcs.edc.renci.org' :
            print("starting svcs")
            svcsResult = subprocess.run(svcsCmd, shell = True, stdout=subprocess.PIPE)
            print("did svcs")
        if hostName != 'dsai-de-elk.edc.renci.org' :
            print("starting elk")
            svcsResult = subprocess.run(elkCmd, shell = True, stdout=subprocess.PIPE)
            print("did elk")
        if hostName != 'dsai-de-amqp.edc.renci.org' :
            print("starting amqp")
            svcsResult = subprocess.run(amqpCmd, shell = True, stdout=subprocess.PIPE)
            print("did amqp")


    print("ok now.")
    conn = sqlite3.connect(app.config['DATABASE'])
    c=conn.cursor()
    query ='select count(*) from patients where ' + patientAttribute + '=' + attrValue+ ';'
    print('Query='+ query)
    c.execute(query)
    localCount = int(c.fetchone()[0])
    spdzCommand = 'cd /home/escott/projects/SPDZ-2/ ; ./patient-count-client.x 2 ' + str(localCount) + ' 0 dsai-de-db.edc.renci.org | tail -1'
    spdzCallerResult = subprocess.run(spdzCommand, shell = True, stdout=subprocess.PIPE)
    runResultString = spdzCallerResult.stdout.decode('utf-8').split(':')[1].strip()

    return runResultString + '\n'





@app.route('/')
def show_usage():
#    return render_template('show_usage.html')
    return render_template('input.html')



